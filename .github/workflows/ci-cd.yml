name: CI/CD Pipeline

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build backend Docker image
        run: docker build -t backend ./backend

      - name: Build frontend Docker image
        run: docker build -t frontend ./frontend

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set ECR URI
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ECR_URI=${ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=${ACCOUNT_ID}" >> $GITHUB_ENV

      - name: Deploy to EC2 (Staging or Production)
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            SSH_KEY="${{ secrets.PROD_SSH_KEY }}"
            HOST="${{ secrets.PROD_HOST }}"
            USER="${{ secrets.PROD_USER }}"
          else
            SSH_KEY="${{ secrets.STAGING_SSH_KEY }}"
            HOST="${{ secrets.STAGING_HOST }}"
            USER="${{ secrets.STAGING_USER }}"
          fi

          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts

          ssh -i ~/.ssh/id_rsa "$USER@$HOST" << EOF
            set -e
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_URI
            docker pull $ECR_URI/tasktracker-frontend:main
            docker pull $ECR_URI/tasktracker-backend:main
            cd ~/deploy
            docker-compose down
            docker-compose up -d
          EOF
