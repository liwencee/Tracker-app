name: CI/CD Pipeline

on:
  push:
    branches:
      - main      # prod
      - staging   # staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS Account ID and set ECR URI
        id: get-ecr-uri
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ECR_URI=${ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV

      - name: Build, tag, and push backend image
        run: |
          TAG=${GITHUB_REF##*/}   # branch name, e.g. main or staging
          docker build -t tasktracker-backend ./backend
          docker tag tasktracker-backend:latest $ECR_URI/tasktracker-backend:$TAG
          docker push $ECR_URI/tasktracker-backend:$TAG

      - name: Build, tag, and push frontend image
        run: |
          TAG=${GITHUB_REF##*/}
          docker build -t tasktracker-frontend ./frontend
          docker tag tasktracker-frontend:latest $ECR_URI/tasktracker-frontend:$TAG
          docker push $ECR_URI/tasktracker-frontend:$TAG

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            ssh-keyscan -H "${{ secrets.EC2_HOST_PROD }}" >> ~/.ssh/known_hosts
          else
            ssh-keyscan -H "${{ secrets.EC2_HOST_STAGING }}" >> ~/.ssh/known_hosts
          fi

      - name: Upload deployment files
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            TARGET_HOST=${{ secrets.EC2_HOST_PROD }}
            TARGET_USER=${{ secrets.EC2_USER_PROD }}
          else
            TARGET_HOST=${{ secrets.EC2_HOST_STAGING }}
            TARGET_USER=${{ secrets.EC2_USER_STAGING }}
          fi

          scp -i ~/.ssh/id_rsa docker-compose.prod.yml deploy.sh $TARGET_USER@$TARGET_HOST:/home/$TARGET_USER/
          scp -r -i ~/.ssh/id_rsa frontend backend $TARGET_USER@$TARGET_HOST:/home/$TARGET_USER/
          ssh -i ~/.ssh/id_rsa $TARGET_USER@$TARGET_HOST "chmod +x /home/$TARGET_USER/deploy.sh"

      - name: Deploy on EC2
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_URI: ${{ env.ECR_URI }}
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            TARGET_HOST=${{ secrets.EC2_HOST_PROD }}
            TARGET_USER=${{ secrets.EC2_USER_PROD }}
            TAG="main"
          else
            TARGET_HOST=${{ secrets.EC2_HOST_STAGING }}
            TARGET_USER=${{ secrets.EC2_USER_STAGING }}
            TAG="staging"
          fi

          ssh -i ~/.ssh/id_rsa $TARGET_USER@$TARGET_HOST << EOF
            docker login -u AWS -p \$(aws ecr get-login-password --region $AWS_REGION) $ECR_URI

            docker pull $ECR_URI/tasktracker-frontend:$TAG
            docker pull $ECR_URI/tasktracker-backend:$TAG

            cd /home/$TARGET_USER
            ./deploy.sh $TAG

            docker-compose down
            docker-compose up -d
          EOF
