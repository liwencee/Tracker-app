name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS Account ID and set ECR URI
        id: get-ecr-uri
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ECR_URI=${ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ env.ECR_URI }}

      - name: Build, tag, and push backend image
        run: |
          docker build -t tasktracker-backend ./backend
          docker tag tasktracker-backend:latest ${{ env.ECR_URI }}/tasktracker-backend:${{ github.ref_name }}
          docker push ${{ env.ECR_URI }}/tasktracker-backend:${{ github.ref_name }}

      - name: Build, tag, and push frontend image
        run: |
          docker build -t tasktracker-frontend ./frontend
          docker tag tasktracker-frontend:latest ${{ env.ECR_URI }}/tasktracker-frontend:${{ github.ref_name }}
          docker push ${{ env.ECR_URI }}/tasktracker-frontend:${{ github.ref_name }}

      - name: Deploy to EC2
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_URI: ${{ env.ECR_URI }}
         

        run: |
          set -e

            # 1. Write SSH key from GitHub secret (must be exactly your PEM content)
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            

            # 2. Add your EC2 host to known_hosts to avoid prompts
            ssh-keyscan -H "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts

            # 3. SSH into your EC2 instance and run the deployment script
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e

            export ECR_URI=${ECR_URI}
            export AWS_REGION=${AWS_REGION}

            # Login to ECR (in case the EC2 session needs it)
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI

            # Optional: Clean up unused Docker resources
             docker system prune -af

            # Pull latest images
            docker pull $ECR_URI/tasktracker-frontend:main
            docker pull $ECR_URI/tasktracker-backend:main

            # Deploy
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d

            # Show running containers for verification
            docker ps
            EOF
