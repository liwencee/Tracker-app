name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Determine ECR URI & Tag
        id: vars
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          # Push to either prod or staging repo
          REPO_BASE="${ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
          echo "ECR_URI=${REPO_BASE}" >> $GITHUB_ENV
          # Use branch name as tag (main → main, staging → staging)
          echo "IMAGE_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin ${{ env.ECR_URI }}

      - name: Build, tag & push backend
        run: |
          docker build -t tasktracker-backend ./backend
          docker tag tasktracker-backend:latest $ECR_URI/tasktracker-backend:$IMAGE_TAG
          docker push $ECR_URI/tasktracker-backend:$IMAGE_TAG

      - name: Build, tag & push frontend
        run: |
          docker build -t tasktracker-frontend ./frontend
          docker tag tasktracker-frontend:latest $ECR_URI/tasktracker-frontend:$IMAGE_TAG
          docker push $ECR_URI/tasktracker-frontend:$IMAGE_TAG

      - name: Deploy to EC2
        env:
          AWS_REGION:    ${{ secrets.AWS_REGION }}
          ECR_URI:       ${{ env.ECR_URI }}
          IMAGE_TAG:     ${{ env.IMAGE_TAG }}
        run: |
          set -env

          # 1. Install SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # 2. Trust the host
          ssh-keyscan -H "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts

          # 3. SSH & deploy
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
         
          set -e

          export ECR_URI=${ECR_URI}
          export AWS_REGION=${AWS_REGION}
          export IMAGE_TAG=${IMAGE_TAG}

          # Login in EC2 session
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin $ECR_URI

          # Clean up unused Docker resources (optional)
          docker system prune -af

          # Pull & run the new images
          docker pull $ECR_URI/tasktracker-frontend:$IMAGE_TAG
          docker pull $ECR_URI/tasktracker-backend:$IMAGE_TAG

          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml up -d

          # Verify
          docker ps
          EOF
