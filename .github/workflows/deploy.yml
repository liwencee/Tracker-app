name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Get AWS Account ID and set ECR URI
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ECR_URI=${ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV

      - name: Set env vars based on branch
        run: |
          if [[ "${GITHUB_REF_NAME}" == "staging" ]]; then
            echo "IMAGE_TAG=staging"            >> $GITHUB_ENV
            echo "TARGET_HOST=${{ secrets.EC2_HOST_STAGING }}" >> $GITHUB_ENV
            echo "SSH_KEY=${{ secrets.SSH_PRIVATE_KEY_STAGING }}" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "IMAGE_TAG=latest"             >> $GITHUB_ENV
            echo "TARGET_HOST=${{ secrets.EC2_HOST_PROD }}"    >> $GITHUB_ENV
            echo "SSH_KEY=${{ secrets.SSH_PRIVATE_KEY_PROD }}" >> $GITHUB_ENV
          else
            echo "Unsupported branch: ${GITHUB_REF_NAME}"
            exit 1
          fi

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin ${{ env.ECR_URI }}

      - name: Build, tag & push backend
        run: |
          docker build -t tasktracker-backend ./backend
          docker tag tasktracker-backend:latest ${{ env.ECR_URI }}/tasktracker-backend:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_URI }}/tasktracker-backend:${{ env.IMAGE_TAG }}

      - name: Build, tag & push frontend
        run: |
          docker build -t tasktracker-frontend ./frontend
          docker tag tasktracker-frontend:latest ${{ env.ECR_URI }}/tasktracker-frontend:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_URI }}/tasktracker-frontend:${{ env.IMAGE_TAG }}

      - name: Deploy to EC2
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_URI:    ${{ env.ECR_URI }}
          IMAGE_TAG:  ${{ env.IMAGE_TAG }}
          TARGET_HOST: $TARGET_HOST
          SSH_KEY:    $SSH_KEY
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$TARGET_HOST" >> ~/.ssh/known_hosts

          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@$TARGET_HOST << 'EOF'
            set -e
            export AWS_REGION=${AWS_REGION}
            export ECR_URI=${ECR_URI}
            export IMAGE_TAG=${IMAGE_TAG}

            aws ecr get-login-password --region $AWS_REGION \
              | docker login --username AWS --password-stdin $ECR_URI

            docker pull $ECR_URI/tasktracker-frontend:$IMAGE_TAG
            docker pull $ECR_URI/tasktracker-backend:$IMAGE_TAG

            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d

            docker ps
          EOF
