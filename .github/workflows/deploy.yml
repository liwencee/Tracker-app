name: Build & Deploy with Docker Compose

on:
  push:
    branches:
      - staging
      - main

env:
  REMOTE_APP_DIR: /home/ubuntu/myapp

jobs:
  build:
    name: ðŸ›  Build Frontend & Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node for frontend
      - name: Setup Node.js for Frontend
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install & Build Frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      # Setup Node for backend
      - name: Setup Node.js for Backend
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Backend dependencies
        working-directory: ./backend
        run: npm ci

      # Prepare files for deployment
      - name: Prepare files for deployment
        run: |
          rm -rf deploy
          mkdir -p deploy/frontend
          mkdir -p deploy/backend
          cp -r frontend/dist/* deploy/frontend/
          cp -r backend/* deploy/backend/

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: deploy-files
          path: deploy

  deploy:
    name: ðŸš€ Deploy to EC2 with Docker Compose
    needs: build
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
    env:
      REMOTE_APP_DIR: /home/ubuntu/myapp

    strategy:
      matrix:
        include:
          - env_name: staging
            branch: staging
            host: ${{ secrets.EC2_HOST_STAGING }}
            user: ${{ secrets.STAGING_SSH_USER }}
          - env_name: production
            branch: main
            host: ${{ secrets.EC2_HOST_PROD}}
            user: ${{ secrets.PROD_SSH_USER }}

    steps:
      - name: Download deployment artifact
        uses: actions/download-artifact@v3
        with:
          name: deploy-files
          path: ./app

      - name: Start SSH Agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add EC2 to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ matrix.host }} >> ~/.ssh/known_hosts

      - name: Copy project files to EC2
        run: |
          ssh ${{ matrix.user }}@${{ matrix.host }} "mkdir -p ${REMOTE_APP_DIR}/frontend ${REMOTE_APP_DIR}/backend"
          scp -r ./app/frontend/* ${{ matrix.user }}@${{ matrix.host }}:${REMOTE_APP_DIR}/frontend/
          scp -r ./app/backend/* ${{ matrix.user }}@${{ matrix.host }}:${REMOTE_APP_DIR}/backend/
          scp ./docker-compose.yml ${{ matrix.user }}@${{ matrix.host }}:${REMOTE_APP_DIR}/

      - name: Run Docker Compose on EC2
        run: |
          ssh ${{ matrix.user }}@${{ matrix.host }} << EOF
            set -e
            cd ${REMOTE_APP_DIR}
            
            docker-compose down
            docker-compose build
            docker-compose up -d --remove-orphans
            docker system prune -f -a -y
            echo "âœ… Deployment to ${matrix.env_name} complete."
          EOF

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "Deployment to ${matrix.env_name} successful!"
          # Add notification logic here, e.g., Slack, email, etc.

      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "Deployment to ${matrix.env_name} FAILED!"
          # Add notification logic here, e.g., Slack, email, etc.
