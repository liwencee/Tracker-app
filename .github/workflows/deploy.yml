name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}

    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
      ecr_uri: ${{ steps.get-ecr-uri.outputs.ecr_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set deployment tag
        id: set-tag
        run: echo "tag=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS Account ID and set ECR URI
        id: get-ecr-uri
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_URI=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
          echo "ecr_uri=$ECR_URI" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        run: |
          docker login -u AWS -p $(aws ecr get-login-password --region $AWS_REGION) ${{ steps.get-ecr-uri.outputs.ecr_uri }}

      - name: Build, tag, and push backend image
        run: |
          docker build -t tasktracker-backend ./backend
          docker tag tasktracker-backend:latest ${{ steps.get-ecr-uri.outputs.ecr_uri }}/tasktracker-backend:${{ steps.set-tag.outputs.tag }}
          docker push ${{ steps.get-ecr-uri.outputs.ecr_uri }}/tasktracker-backend:${{ steps.set-tag.outputs.tag }}

      - name: Build, tag, and push frontend image
        run: |
          docker build -t tasktracker-frontend ./frontend
          docker tag tasktracker-frontend:latest ${{ steps.get-ecr-uri.outputs.ecr_uri }}/tasktracker-frontend:${{ steps.set-tag.outputs.tag }}
          docker push ${{ steps.get-ecr-uri.outputs.ecr_uri }}/tasktracker-frontend:${{ steps.set-tag.outputs.tag }}


  deploy-staging:
    needs: build-and-push
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH for Staging
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "ec2-34-235-114-193.compute-1.amazonaws.com" >> ~/.ssh/known_hosts
          

      - name: Upload deployment files to Staging
        run: |
          scp -i ~/.ssh/id_rsa docker-compose.prod.yml deploy.sh ${{ secrets.EC2_USER_STAGING }}@${{ secrets.EC2_HOST_STAGING }}:/home/${{ secrets.EC2_USER_STAGING }}/
          scp -r -i ~/.ssh/id_rsa frontend backend ${{ secrets.EC2_USER_STAGING }}@${{ secrets.EC2_HOST_STAGING }}:/home/${{ secrets.EC2_USER_STAGING }}/
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER_STAGING }}@${{ secrets.EC2_HOST_STAGING }} "chmod +x /home/${{ secrets.EC2_USER_STAGING }}/deploy.sh"

      - name: Deploy to Staging
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_URI: ${{ needs.build-and-push.outputs.ecr_uri }}
          TAG: staging
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER_STAGING }}@${{ secrets.EC2_HOST_STAGING }} << EOF
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI

            docker pull $ECR_URI/tasktracker-frontend:$TAG
            docker pull $ECR_URI/tasktracker-backend:$TAG

            cd /home/${{ secrets.EC2_USER_STAGING }}
            ./deploy.sh $TAG

            docker-compose down
            docker-compose up -d
          EOF


  deploy-prod:
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH for Production
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "ec2-54-175-198-233.compute-1.amazonaws.com" >> ~/.ssh/known_hosts
      - name: Upload deployment files to Production
        run: |
          scp -r -i ~/.ssh/id_rsa frontend backend ${{ secrets.EC2_USER_PROD }}@${{ secrets.EC2_HOST_PROD }}:/home/${{ secrets.EC2_USER_PROD }}/
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER_PROD }}@${{ secrets.EC2_HOST_PROD }} "chmod +x /home/${{ secrets.EC2_USER_PROD }}/deploy.sh"
          scp -i ~/.ssh/id_rsa ./docker-compose.prod.yml ./deploy.sh $TARGET_USER@$TARGET_HOST:/home/$TARGET_USER/


      - name: Deploy to Production
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_URI: ${{ needs.build-and-push.outputs.ecr_uri }}
          TAG: main
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER_PROD }}@${{ secrets.EC2_HOST_PROD }} << EOF
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI

            docker pull $ECR_URI/tasktracker-frontend:$TAG
            docker pull $ECR_URI/tasktracker-backend:$TAG

            cd /home/${{ secrets.EC2_USER_PROD }}
            ./deploy.sh $TAG

            docker-compose down
            docker-compose up -d
          EOF
