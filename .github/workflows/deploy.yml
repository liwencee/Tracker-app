name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-push:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      ecr_uri: ${{ steps.set-ecr.outputs.ecr_uri }}
      image_tag: ${{ steps.set-ecr.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set deployment environment
        id: set-env
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set ECR URI and IMAGE_TAG
        id: set-ecr
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_URI="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          IMAGE_TAG="${GITHUB_REF##*/}-$(date +%s)"
          echo "ecr_uri=$ECR_URI" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin ${{ steps.set-ecr.outputs.ecr_uri }}

      - name: Build and push backend
        run: |
          docker build -t ${{ steps.set-ecr.outputs.ecr_uri }}/tasktracker-backend:${{ steps.set-ecr.outputs.image_tag }} ./backend
          docker push ${{ steps.set-ecr.outputs.ecr_uri }}/tasktracker-backend:${{ steps.set-ecr.outputs.image_tag }}

      - name: Build and push frontend
        run: |
          docker build -t ${{ steps.set-ecr.outputs.ecr_uri }}/tasktracker-frontend:${{ steps.set-ecr.outputs.image_tag }} ./frontend
          docker push ${{ steps.set-ecr.outputs.ecr_uri }}/tasktracker-frontend:${{ steps.set-ecr.outputs.image_tag }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-push
    env:
      ENVIRONMENT: ${{ needs.build-push.outputs.environment }}
      SSH_USER: ${{ secrets[ format('{0}_SSH_USER', needs.build-push.outputs.environment) ] }}
      SSH_HOST: ${{ secrets[ format('{0}_SSH_HOST', needs.build-push.outputs.environment) ] }}
      SSH_KEY: ${{ secrets[ format('{0}_SSH_KEY', needs.build-push.outputs.environment) ] }}
      AWS_REGION: ${{ env.AWS_REGION }}
      ECR_URI: ${{ needs.build-push.outputs.ecr_uri }}
      IMAGE_TAG: ${{ needs.build-push.outputs.image_tag }}
    steps:
      - name: Deploy to EC2 via SSH
        shell: bash
        run: |
          set -ex

          # Configure SSH
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          printf "%s" "$SSH_KEY" | base64 -d -w0 > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

          # Execute remote commands with TTY
          ssh -tt -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST << EOF
            set -ex

            # Install AWS CLI via curl if not present
            if ! command -v aws &> /dev/null; then
              sudo apt-get update -qq && sudo apt-get install -y curl unzip
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
            fi

            # Login to ECR and deploy
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d
            docker system prune -af
            docker ps
          EOF
